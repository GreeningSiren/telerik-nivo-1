9. допишете пищова си обяснение, че 
drawImage(ИмеНаКарин,надясност,надолност,размерX,размерY); = рисува избраната картинка (трябва да я е имало в папка Images) на посочените кординати с посочените размери.  Този ред работи само ако е написан въртре в { } на drawImage.
13. console.log("текст") 

0. допишете пищова си с обяснение, че:
let IMENAPROMENLIVA; -създава място в паметта където ще бъде съханявано число за целите на вашата програма. Наричаме го променлива и трябва да му изберем разбираемо име.

имеНаПроменлива = някаква сметка; -сметката вдясно от = ще буде изчислена от компа и получреният резултат ще е новата стойност на проименливата вляво от равното.   ВНИМАНИЕ! вляво от равното може само една променлива

0. допишете пищова си 
  if(булева проверка) {
         редове код, изпълнявани ако проверката се е оказала истиина
}

if(булева проверка){
    редове код, изпълнявани
    ако проверката се е
    оказала истина
}else{
    редове код, изпълнявани
    ако проверката се е
    оказала лъжа. Ние си
    решаваме искаме ли
    else- не е задължителен.

}

10. допишете пиштов дададаадд
	че randomInteger(доколко) ще даде числова стойност случайна от 0 включително до доколко изключително

Допишете пищова (сякаш не беше ясно)
	може да създаваме променливи на които ще даваме стойности тру 	или фалсе - тАКИВА пРОМЕНЛИВИ нАРИЧАМЕ бУЛЕВИ и вИ 	сЪВЕТВАМ в иМЕТО иМ дА иЗПОЛЗВАТЕ "лИ", нАПРИМЕР 	nadoluLiSeDvizhiTopka

0.Допишете пищова си, че

Когато създаваме променливите, може да им даваме не само числови стойности ами и булеви. (true, false)... Полезно е името на такава променлива да съдържа българската думичка 'дали' за да знаем каква стойност да очакваме.

0.допишете пищова си с цялата таблица и обяснения за булевите знаци && ||  и обяснения    {и &&   или ||}

0.Допишете пищова си с обяснения за знаци, които можем да слагаме между 2 булчета И &&

също ИЛИ ||

Когато valiLi ИЛИ greeLi, то е нужен чадър
Когато valiLi И greeLi, то ще се появи дъга

0.Допишете пищова си с обяснения, че в { } на keyup можем да ползваме специалната променлива key която ни издава код на използвания клавиш. Тия кодове са някакви смахнати, но имат и удобно подредени части, например поредните букви от латиницата са с хубаво подредени последователни номера от което се възползвахме в играта изпитвачка на азбуката.

0.Допишете пищова си с обяснения, че можем да добавим в кода си ей таково чудо:

function keydown(key){

   редове код, изпълнявани при започване

   да се натиска клавиша с код key

} 
                                                     
0.Може би допишете пищова, щото не съм сигурен да броим ли за ново знание:
                                        
Някои картинки имат [ ] в името си. В тези скоби освен самото конкретно число е разрешено да написваме и сметка, която компютъра да изчисли докато играем и полученият резултат да определи, коя от поредицата картинки да бъде нарисувана сега. Ако в името на картинка има число, но то не е в [ ] няма да може да ползваме сметка да определи
                                          
0.допишете пищова си с обяснение, че цикъл for позволява наш код да бъде изпълняван многократно. В облите му скоби трябва да напишем
                                                   
начална стойност- пълноценно редче код
                                
булева проверка- не е цял ред код, а само такова дето държахме и в ( ) на иф-ове
                         
стъпка- пълноценно редче код
              
for(начална стойност;булева проверка;стъпка){
   
    редове Код изпълнявани
    докато условието е истина
}

0.Допишете аритметичните знаци, които до сега познавахме + - * /, че дават числов резултат с новия знак остатък при деление %

  може да си отбележите, че / и % трябва да внимаваме да не делим на 0

0.допишете пищова си с обяснение, че
let m=[]; създава поредица от данни. Можем
да започнем да и даваме стойности, стига в
[] да посочваме коректен индекс, например
jivoti=jivoti-m[5]; би работило,ако до сега
сме давали стойност на елементн с индекс 5
Правилно е индексите да са от 0 до размер-1   
‍‍

0. Допишете пищова с обяснение, че 
function amon() {
	zapovedi beeee
}
научава това поредица да бъде озаглавена с amon, когин се извика, да се изпълни.

0.допишете пищова си с обяснения, че
context.strokeRect(sx,sy,rx,ry); -работи само в функцията
draw- ще нарисува кух правоъгълник с горен ляв ъгъл
sx,sy (екранни координати) и размери rx,ry

0.Допишете си пищова с обяснения, че за да рисуваме линия пишем:
context.beginPath();
context.moveTo(otkydeX,otkydeY);
context.lineTo(dokydeX,dokydeY);
context.stroke();

и че: че функция може да изисква да получи параметри за да бъде извикана:
function qj(hrana){  } -който ще я вика трябва да
посочи стойност в облите скоби, напр: qj(kufteto)

0.Допишете пищова си с обяснения, че в кода на наша функция можем да напишем

return nqkvaStoinost; -това прекратява изпълнението на нашата функция точно както } също би я прекратило... И компа трябва да продължи да изпълнява заповедите написани там откъдето нашата функция е била извикана... Якото е, че ще бъде върнат резултат nqkvaStoinst там откъдето са ни извикали функцията. Ние вече сме ползвали функции връщащи резултат, като areColliding, Math.floor, randomInteger и други, а вече ще можем да си правим и собствени.

0.допишете пищова си, че ни е позволено всеки елемент на
масив да му дадем стойност [] също масив... алеле, ще стане
масив от масиви...нарича се също двумерен масив и се ползва
когато искаме да съхраним таблица от данни. За да стигнем
до негов елемент е нужно да посочва 2 индекса masiv[i][j]=7
Всъщност можем да имаме и масив от масиви от масиви- нарича
се тримерен масив,че и повече...стига да имаме такава нужда